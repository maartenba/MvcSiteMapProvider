<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmbiguousControllerFoundMultipleControllers" xml:space="preserve">
    <value>Ambiguous controller. Found multiple controller types for {0}Controller. Consider narrowing the places to search by adding you controller namespaces to ControllerBuilder.Current.DefaultNamespaces.</value>
  </data>
  <data name="CannotEnumerateThreadSafeDictionary" xml:space="preserve">
    <value>Cannot enumerate a threadsafe dictionary. Instead, enumerate the keys or values collection.</value>
  </data>
  <data name="CannotExitUpTopDirectory" xml:space="preserve">
    <value>Cannot use a leading .. to exit above the top directory.</value>
  </data>
  <data name="CollectionReadOnly" xml:space="preserve">
    <value>Collection is read-only.</value>
  </data>
  <data name="InvalidSiteMapElement" xml:space="preserve">
    <value>An invalid element was found in the sitemap.</value>
  </data>
  <data name="InvalidVirtualPath" xml:space="preserve">
    <value>'{0}' is not a valid virtual path.</value>
  </data>
  <data name="MultipleNodesWithIdenticalKey" xml:space="preserve">
    <value>Multiple nodes with the same key '{0}' were found. SiteMap requires that sitemap nodes have unique keys.</value>
  </data>
  <data name="MultipleNodesWithIdenticalUrl" xml:space="preserve">
    <value>Multiple nodes with the same URL '{0}' were found. SiteMap requires that sitemap nodes have unique URLs.</value>
  </data>
  <data name="NoParentKeyDefined" xml:space="preserve">
    <value>Multiple root nodes defined. Are you missing a ParentKey definition on the '{0}' controller, '{1}'?</value>
  </data>
  <data name="NamedUrlResolverNotFound" xml:space="preserve">
    <value>The URL resolver instance named '{0}' was not found. Check your DI configuration to ensure a URL resolver instance with this name exists.</value>
  </data>
  <data name="PhysicalPathNotAllowed" xml:space="preserve">
    <value>'{0}' is a physical path, but a virtual path was expected.</value>
  </data>
  <data name="SiteMapInvalidRootNode" xml:space="preserve">
    <value>Root node defined in SiteMap is null, root node cannot be null.</value>
  </data>
  <data name="SiteMapLoaderAlreadySet" xml:space="preserve">
    <value>The sitemap loader may only be set in the Application_Start event of Global.asax and must not be set again. Set the 'MvcSiteMapProvider_UseExternalDIContainer' in the AppSettings section of the web.config file to 'true' if you are using an external dependency injection container.</value>
  </data>
  <data name="ResourceNotFoundWithClassAndKey" xml:space="preserve">
    <value>The resource object with classname '{0}' and key '{1}' was not found.</value>
  </data>
  <data name="SecurityTrimmingCannotBeDisabled" xml:space="preserve">
    <value>Security trimming cannot be disabled again after it is enabled.</value>
  </data>
  <data name="SiteMapNodeReadOnly" xml:space="preserve">
    <value>SiteMapNode is readonly, property '{0}' cannot be modified.</value>
  </data>
  <data name="SiteMapReadOnly" xml:space="preserve">
    <value>SiteMap is readonly, nodes cannot be modified.</value>
  </data>
  <data name="SiteMapNodeCanonicalValueAlreadySet" xml:space="preserve">
    <value>The '{0}' has already been set. Simultaneous use of both CanonicalUrl and CanonicalKey is not allowed.</value>
  </data>
  <data name="VisitingSiteMapBuilderRequiresRootNode" xml:space="preserve">
    <value>VisitingSiteMapBuilder requires a root node to be passed. Make sure there is a builder configured to run before it that returns a valid root node.</value>
  </data>
  <data name="MetaRobotsValueFollowAmbiguous" xml:space="preserve">
    <value>The '{0}' value for the robots meta tag has already been added for node. 'follow' and 'nofollow' may not be used at the same time.</value>
  </data>
  <data name="MetaRobotsValueIndexAmbiguous" xml:space="preserve">
    <value>The '{0}' value for the robots meta tag has already been added for node. 'index' and 'noindex' may not be used at the same time.</value>
  </data>
  <data name="MetaRobotsValueNoneAmbiguous" xml:space="preserve">
    <value>The '{0}' value for the robots meta tag has already been added for node. 'none' cannot be used in conjunction with 'index', 'noindex', 'follow', or 'nofollow'. You may use 'none' to indicate 'noindex' and 'nofollow' (not recommended), but do not combine it with these values.</value>
  </data>
  <data name="MetaRobotsValueUnrecognized" xml:space="preserve">
    <value>The value '{0}' is not a valid meta robots value.</value>
  </data>
  <data name="CopyOperationDoesNotSupportReferenceTypes" xml:space="preserve">
    <value>Copy operation does not support reference types. If you need this functionality, override CopyTo() and provide your own implementation.</value>
  </data>
  <data name="DictionaryAlreadyContainsKey" xml:space="preserve">
    <value>An item with the same key has already been added.</value>
  </data>
  <data name="XmlFileNotFound" xml:space="preserve">
    <value>Xml file '{0}' could not be found. Verify that the path provided is correct.</value>
  </data>
  <data name="XmlValidationFailed" xml:space="preserve">
    <value>The file at '{0}' contains XML validation errors. See the inner exception for complete details.</value>
  </data>
  <data name="UnknownSiteMap" xml:space="preserve">
    <value>Unknown SiteMap: '{0}'.</value>
  </data>
  <data name="NamedBuilderSetNotFound" xml:space="preserve">
    <value>The builder set instance named '{0}' was not found. Check your DI configuration to ensure a builder set instance with this name exists.</value>
  </data>
  <data name="SiteMapLoaderNotInitialized" xml:space="preserve">
    <value>The SiteMapLoader has not been initialized. You must set the SiteMaps.Loader property during Application_Start in Global.asax if the 'MvcSiteMapProvider_UseExternalDIContainer' setting is set to 'true' in the AppSettings section of web.config.</value>
  </data>
  <data name="ObjectFieldNotFound" xml:space="preserve">
    <value>Field '{0}' was not found in Type '{1}'.</value>
  </data>
  <data name="ObjectPropertyNotFound" xml:space="preserve">
    <value>Property '{0}' was not found in Type '{1}'.</value>
  </data>
</root>